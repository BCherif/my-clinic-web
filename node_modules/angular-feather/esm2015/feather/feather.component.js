import { Component, ElementRef, Input, Inject, ChangeDetectorRef } from '@angular/core';
import { Icons } from './icons.provider';
import { uppercamelcase } from './utils';
export class FeatherComponent {
    constructor(elem, changeDetector, icons) {
        this.elem = elem;
        this.changeDetector = changeDetector;
        this.icons = icons;
    }
    ngOnChanges(changes) {
        // icons are provided as an array of objects because of "multi: true"
        const icons = Object.assign({}, ...this.icons);
        const svg = icons[uppercamelcase(changes.name.currentValue)] || '';
        if (!svg) {
            console.warn(`Icon not found: ${changes.name.currentValue}\n` +
                `Refer to documentation on https://github.com/michaelbazos/angular-feather`);
        }
        this.elem.nativeElement.innerHTML = svg;
        this.changeDetector.markForCheck();
    }
}
FeatherComponent.decorators = [
    { type: Component, args: [{
                // tslint:disable-next-line:component-selector
                selector: 'i-feather, feather-icon',
                template: "<ng-content></ng-content>\n",
                styles: [":host{display:inline-block;fill:none;height:24px;stroke:currentColor;stroke-linecap:round;stroke-linejoin:round;stroke-width:2px;width:24px}"]
            },] }
];
FeatherComponent.ctorParameters = () => [
    { type: ElementRef, decorators: [{ type: Inject, args: [ElementRef,] }] },
    { type: ChangeDetectorRef, decorators: [{ type: Inject, args: [ChangeDetectorRef,] }] },
    { type: Icons, decorators: [{ type: Inject, args: [Icons,] }] }
];
FeatherComponent.propDecorators = {
    name: [{ type: Input }]
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZmVhdGhlci5jb21wb25lbnQuanMiLCJzb3VyY2VSb290IjoiLi4vLi4vc3JjL2xpYi8iLCJzb3VyY2VzIjpbImZlYXRoZXIvZmVhdGhlci5jb21wb25lbnQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLFNBQVMsRUFBRSxVQUFVLEVBQUUsS0FBSyxFQUFFLE1BQU0sRUFBRSxpQkFBaUIsRUFBNEIsTUFBTSxlQUFlLENBQUM7QUFDbEgsT0FBTyxFQUFFLEtBQUssRUFBRSxNQUFNLGtCQUFrQixDQUFDO0FBQ3pDLE9BQU8sRUFBRSxjQUFjLEVBQUUsTUFBTSxTQUFTLENBQUM7QUFTekMsTUFBTSxPQUFPLGdCQUFnQjtJQUczQixZQUM4QixJQUFnQixFQUNULGNBQWlDLEVBQzdDLEtBQVk7UUFGUCxTQUFJLEdBQUosSUFBSSxDQUFZO1FBQ1QsbUJBQWMsR0FBZCxjQUFjLENBQW1CO1FBQzdDLFVBQUssR0FBTCxLQUFLLENBQU87SUFDbEMsQ0FBQztJQUVKLFdBQVcsQ0FBQyxPQUFzQjtRQUNoQyxxRUFBcUU7UUFDckUsTUFBTSxLQUFLLEdBQUcsTUFBTSxDQUFDLE1BQU0sQ0FBQyxFQUFFLEVBQUUsR0FBSSxJQUFJLENBQUMsS0FBeUIsQ0FBQyxDQUFDO1FBQ3BFLE1BQU0sR0FBRyxHQUFHLEtBQUssQ0FBRSxjQUFjLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxZQUFZLENBQUMsQ0FBRSxJQUFJLEVBQUUsQ0FBQztRQUVyRSxJQUFJLENBQUMsR0FBRyxFQUFFO1lBQ1IsT0FBTyxDQUFDLElBQUksQ0FDVixtQkFBbUIsT0FBTyxDQUFDLElBQUksQ0FBQyxZQUFZLElBQUk7Z0JBQ2hELDJFQUEyRSxDQUM1RSxDQUFDO1NBQ0g7UUFFRCxJQUFJLENBQUMsSUFBSSxDQUFDLGFBQWEsQ0FBQyxTQUFTLEdBQUcsR0FBRyxDQUFDO1FBQ3hDLElBQUksQ0FBQyxjQUFjLENBQUMsWUFBWSxFQUFFLENBQUM7SUFDckMsQ0FBQzs7O1lBN0JGLFNBQVMsU0FBQztnQkFDVCw4Q0FBOEM7Z0JBQzlDLFFBQVEsRUFBRSx5QkFBeUI7Z0JBQ25DLHVDQUF1Qzs7YUFFeEM7OztZQVZtQixVQUFVLHVCQWV6QixNQUFNLFNBQUMsVUFBVTtZQWZ5QixpQkFBaUIsdUJBZ0IzRCxNQUFNLFNBQUMsaUJBQWlCO1lBZnBCLEtBQUssdUJBZ0JULE1BQU0sU0FBQyxLQUFLOzs7bUJBTGQsS0FBSyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IENvbXBvbmVudCwgRWxlbWVudFJlZiwgSW5wdXQsIEluamVjdCwgQ2hhbmdlRGV0ZWN0b3JSZWYsIE9uQ2hhbmdlcywgU2ltcGxlQ2hhbmdlcyB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgSWNvbnMgfSBmcm9tICcuL2ljb25zLnByb3ZpZGVyJztcbmltcG9ydCB7IHVwcGVyY2FtZWxjYXNlIH0gZnJvbSAnLi91dGlscyc7XG5cblxuQENvbXBvbmVudCh7XG4gIC8vIHRzbGludDpkaXNhYmxlLW5leHQtbGluZTpjb21wb25lbnQtc2VsZWN0b3JcbiAgc2VsZWN0b3I6ICdpLWZlYXRoZXIsIGZlYXRoZXItaWNvbicsXG4gIHRlbXBsYXRlVXJsOiAnLi9mZWF0aGVyLmNvbXBvbmVudC5odG1sJyxcbiAgc3R5bGVVcmxzOiBbICcuL2ZlYXRoZXIuY29tcG9uZW50LnNjc3MnIF0sXG59KVxuZXhwb3J0IGNsYXNzIEZlYXRoZXJDb21wb25lbnQgaW1wbGVtZW50cyBPbkNoYW5nZXMge1xuICBASW5wdXQoKSBuYW1lITogc3RyaW5nO1xuXG4gIGNvbnN0cnVjdG9yKFxuICAgIEBJbmplY3QoRWxlbWVudFJlZikgcHJpdmF0ZSBlbGVtOiBFbGVtZW50UmVmLFxuICAgIEBJbmplY3QoQ2hhbmdlRGV0ZWN0b3JSZWYpIHByaXZhdGUgY2hhbmdlRGV0ZWN0b3I6IENoYW5nZURldGVjdG9yUmVmLFxuICAgIEBJbmplY3QoSWNvbnMpIHByaXZhdGUgaWNvbnM6IEljb25zXG4gICkge31cblxuICBuZ09uQ2hhbmdlcyhjaGFuZ2VzOiBTaW1wbGVDaGFuZ2VzKSB7XG4gICAgLy8gaWNvbnMgYXJlIHByb3ZpZGVkIGFzIGFuIGFycmF5IG9mIG9iamVjdHMgYmVjYXVzZSBvZiBcIm11bHRpOiB0cnVlXCJcbiAgICBjb25zdCBpY29ucyA9IE9iamVjdC5hc3NpZ24oe30sIC4uLih0aGlzLmljb25zIGFzIGFueSBhcyBvYmplY3RbXSkpO1xuICAgIGNvbnN0IHN2ZyA9IGljb25zWyB1cHBlcmNhbWVsY2FzZShjaGFuZ2VzLm5hbWUuY3VycmVudFZhbHVlKSBdIHx8ICcnO1xuXG4gICAgaWYgKCFzdmcpIHtcbiAgICAgIGNvbnNvbGUud2FybihcbiAgICAgICAgYEljb24gbm90IGZvdW5kOiAke2NoYW5nZXMubmFtZS5jdXJyZW50VmFsdWV9XFxuYCArXG4gICAgICAgIGBSZWZlciB0byBkb2N1bWVudGF0aW9uIG9uIGh0dHBzOi8vZ2l0aHViLmNvbS9taWNoYWVsYmF6b3MvYW5ndWxhci1mZWF0aGVyYFxuICAgICAgKTtcbiAgICB9XG5cbiAgICB0aGlzLmVsZW0ubmF0aXZlRWxlbWVudC5pbm5lckhUTUwgPSBzdmc7XG4gICAgdGhpcy5jaGFuZ2VEZXRlY3Rvci5tYXJrRm9yQ2hlY2soKTtcbiAgfVxufVxuIl19